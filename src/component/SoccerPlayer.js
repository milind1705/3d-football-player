/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useThree, useFrame } from "react-three-fiber";
export default function Model({ ...props }) {
  const { camera } = useThree();
  const[action, setAction] = useState('idle')
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/soccorPlayer.glb')
  const { actions } = useAnimations(animations, group)
  const previousAction = usePrevious(action);
  const startAnimation =()=>{
    window.addEventListener('keydown', (e)=>{
      if(e.key === 'p'){
        setAction('pass')
      }
      if(e.key === 'ArrowUp'){
        setAction('walking')
      }
      if(e.key === 'k'){
        setAction('penaltyKick1')
      }
     
      
    })
  }
  const stopAnimation = ()=>{
    window.addEventListener('keyup', ()=>{
      setAction('idle')
    })
  }
  startAnimation()
  stopAnimation()
  useEffect(() => {
    if (previousAction) {
      actions[previousAction].fadeOut(0.2);
      actions[action].stop();
    }
    actions[action].play();
    actions[action].fadeIn(0.2);
  }, [actions, action, previousAction]);
  useFrame(() => {
    // if(action != "idle"){

    //   camera.position.x = group.current.position.x + 3;
    //   camera.position.z = group.current.position.z + 3;
    //   camera.position.y = 3;
    // }
    // camera.lookAt(group.current.position);
    if (action === "walking") group.current.translateZ(0.02);
    window.addEventListener("keydown", (e) => {
      if (e.key === "ArrowLeft") {
        group.current.rotation.y += 0.01;
      }
      if (e.key === "ArrowRight") {
        group.current.rotation.y += -0.01;
      }
      if (e.key === "ArrowDown") {
        group.current.rotation.y += Math.PI/2;
      }
    });
  }, [action]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Ch42__Eyelashes" geometry={nodes.Ch42__Eyelashes.geometry} material={materials.Ch42_Hair} skeleton={nodes.Ch42__Eyelashes.skeleton} />
          <skinnedMesh name="Ch42_Body1" geometry={nodes.Ch42_Body1.geometry} material={materials.Ch42_Body} skeleton={nodes.Ch42_Body1.skeleton} />
          <skinnedMesh name="Ch42_Hair1" geometry={nodes.Ch42_Hair1.geometry} material={materials.Ch42_Hair} skeleton={nodes.Ch42_Hair1.skeleton} />
          <skinnedMesh name="Ch42_Shirt" geometry={nodes.Ch42_Shirt.geometry} material={materials.Ch42_Body} skeleton={nodes.Ch42_Shirt.skeleton} />
          <skinnedMesh name="Ch42_Shorts" geometry={nodes.Ch42_Shorts.geometry} material={materials.Ch42_Body} skeleton={nodes.Ch42_Shorts.skeleton} />
          <skinnedMesh name="Ch42_Sneakers" geometry={nodes.Ch42_Sneakers.geometry} material={materials.Ch42_Body} skeleton={nodes.Ch42_Sneakers.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/soccorPlayer.glb')

function usePrevious(val) {
  const ref = useRef();
  useEffect(() => {
    ref.current = val;
  }, [val]);

  return ref.current;
}
